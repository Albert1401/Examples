{
open Calc.AST
}

tokens {
    _ of string
}

options {
    translate = true
    module = "Calc.Parser"
    infEpsPath = epsilons
    pos = uint64
}

module Main

[<Start>]
program: (stmt SEMI)+

stmt:
   v=VAR EQ e=expr {
   let result = getValue(e)
   if (vars.ContainsKey(v)) then
     vars.[v] <- result
   else
     vars.Add(v, result)
   returnVal = result
   EqStmt(v, e)
   }

   | e=expr {
   returnVal = getValue(e)
   SingleExpr(e)
   }

binExpr<operand binOp>: h=operand tl=(binOp operand)* {
   let calcFunc l (op, r) =
      let result = match op with
      | Plus  -> getValue l + getValue r
      | Minus -> getValue l - getValue r
      | Mult  -> getValue l * getValue r
      | Div   -> getValue l / getValue r
      | Pow   -> getValue l ** getValue r
      BinOp(op,l,r, result)
   List.fold calcFunc h tl
}

expr: binExpr<term termOp>

termOp: PLUS {Plus} | MINUS {Minus}

term: binExpr<factor factorOp>

factorOp: MULT {Mult} | DIV {Div}

factor: binExpr<powExpr powOp>

powOp: POW {Pow}

powExpr:
   n=NUMBER {Num (float n)}
   | v=VAR {EVar(v)}
   | LBRACE e=expr RBRACE {e}

